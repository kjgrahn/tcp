.ss 12 0
.de BP
.IP \\fB\\$*
..
.hw si-tu-ations
.
.TH tcp 1 "APR 2025" Tcp "User Manuals"
.
.
.SH "NAME"
tcp \- replacement for 'tcpflow -CDJ'
.
.SH "SYNOPSIS"
.B tcp
.RB [ \-w
.IR n ]
.RB [ \-c ]
.RB [ \-a ]
.RB [ \-i
.IR iface
|
.B \-r
.IR file ]
.RI [ expression ]
.
.SH "DESCRIPTION"
.B tcp
(I couldn't come up with a better name)
is a tool for watching mostly binary protocols over TCP,
in situations where TCP itself is trouble-free.
.
.PP
.BR tcpdump (1)
gives you, for this purpose, too many details and
makes it hard to focus on just the payload.
.BR tcpflow (1)
is mostly intended to save different flows to files (and, it seems, focuses
on application-level protocols like HTTP).
With the
.B \-CD
options to print to stdout it is underdeveloped: the output
lacks timestamps and \s-2SYN/FIN/RST\s0 information.
.\" Or at least this was the case in 2016.
.
.PP
.B tcp
simply prints the contents of each TCP segment, and the
.BR \s-1SYN / FIN / RST\s0
flags.  It prints the timestamp with millisecond precision,
prints the source and destination ports,
and optionally colorizes the output.
For example:
.
.nf
.IP
.ft CW
08:53:39.918 46434 ->  4711  SYN
08:53:39.919  4711 -> 46434  SYN
08:53:39.919 46434 ->  4711  Hello, world!.
08:53:39.919  4711 -> 46434  ok.
08:53:47.956  4711 -> 46434  FIN
08:53:47.956 46434 ->  4711  FIN
.fi
.
.SH "Retransmissions"
.B tcp
tries to avoid confusing you when the TCP sequences have irregularities,
like retransmissions or out-of-order segments.
To this end, a segment which doesn't just complement earlier ones is
.I not
printed, and a message about duplication, overlap or a hole is
printed instead.
.PP
You should see that as a hint that you need to do a deeper analysis
using
.BR tcpdump (1)
or similar, because what
.B tcp
displays in that scenario may not reflect what reaches the application.
The TCP stack is better at stitching together confused segments.
.
.SH "Link layers"
.B tcp
has support for plain
.BR Ethernet ,
.B "802.1Q VLAN"
over Ethernet,
.BR DLT_RAW
and
.B DLT_LINUX_SLL2
(Linux
.IR "tcpdump \-iany" ).
The list is a bit arbitrary: it's simply the types I've needed and had access
to over the years.
.
.SH "OPTIONS"
.
.BP \-w,\ --width\ \fIn
Output width; default 80 characters.
Specifying
.B -w$\s-2COLUMNS\s0
will probably use the full terminal width.
.
.BP \-c,\ --color
Colorize the output.
Data to low ports (presumably client-to-server)
is yellow and other data (server-to-client) is green.
.
.BP \-a,\ --ascii
Print as ASCII instead of hexdumped octets. Anything nonprintable
is replaced by dots (so you lose information this way).
.
.BP \-i\ \fIiface
Listen on
.IR iface ,
e.g.
.B eth0
or
.BR lo .
.
.BP \-r\ \fIfile
Read packets from
.IR file .
.B \-
means standard input.
.
.IP \fIexpression
BPF filter to apply to the interface or file; see
.BR pcap-filter (7)
for syntax.
.
.SH "LIMITATIONS"
.IP \- 3x
IP fragments are ignored.
.IP \-
Packets with IPv6 extension headers aren't handled well.
.IP \-
Apart from the detection of anomalities in the data streams described
above, there's no handling of TCP state.
ACKs, windows and so on aren't handled at all.
.IP \-
TCP sessions are identified only by the port numbers involved.
This is for readability purposes, but also makes it hard to watch
many sessions between many hosts.
.IP \-
It's all a quick hack.
You probably shouldn't feed
.B tcp
untrusted data; there are ample opportunities for someone to
feed it crafted packets which makes it crash or worse.
.
.PP
If you need more, you should consider using
.BR tcpdump (1),
.BR tcpflow (1)
or
.BR tcptrace (1),
or a combination.
.
.SH "AUTHOR"
J\(:orgen Grahn \fI\[fo]grahn+src@snipabacken.se\[fc]
.
.SH "LICENSE"
.
The Modified BSD license.
.
.SH "SEE ALSO"
.BR pcap-filter (7),
.BR tcpdump (1),
.BR tcpflow (1),
.BR tcptrace (1).
